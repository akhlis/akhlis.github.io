{"data":{"doc":{"path":"/docs/routing","title":"Routing","content":"<h1 id=\"routing\"><a href=\"#routing\" aria-hidden=\"true\">#</a>Routing</h1>\n<p>Gridsome uses <a href=\"https://router.vuejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">vue-router</a> for routing.</p>\n<h2 id=\"page-routing\"><a href=\"#page-routing\" aria-hidden=\"true\">#</a>Page routing</h2>\n<p>All <code class=\"language-text\">.vue</code> files in the <code class=\"language-text\">src/pages</code> directory will become the pages for your\nwebsite. The page URL is generated based on the location and name of the file. The path will be lowercased and slugified automatically. Files named <code class=\"language-text\">Index.vue</code> are treated like <code class=\"language-text\">index.html</code> files and will not get a slug.</p>\n<p>Examples:</p>\n<ul>\n<li><code class=\"language-text\">/src/pages/Index.vue</code> will be <strong>/</strong></li>\n<li><code class=\"language-text\">/src/pages/About.vue</code> will be <strong>/about</strong></li>\n<li><code class=\"language-text\">/src/pages/OurTeam.vue</code> will be <strong>/our-team</strong></li>\n<li><code class=\"language-text\">/src/pages/features/Index.vue</code> will be <strong>/features</strong></li>\n<li><code class=\"language-text\">/src/pages/features/Awesome.vue</code> will be <strong>/features/awesome</strong></li>\n</ul>\n<p>Learn more about <a href=\"/docs/pages\">Pages</a></p>\n<h2 id=\"routing-for-source-plugins\"><a href=\"#routing-for-source-plugins\" aria-hidden=\"true\">#</a>Routing for source plugins</h2>\n<p><strong>Data source plugins</strong> adds routing automatically with settings. These could be different for each plugin so check the plugin documentation how to use route.</p>\n<pre class=\"language-js\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  plugins<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      use<span class=\"token punctuation\">:</span> <span class=\"token string\">'@gridsome/source-filesystem'</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        path<span class=\"token punctuation\">:</span> <span class=\"token string\">'blog/**/*.md'</span><span class=\"token punctuation\">,</span>\n        typeName<span class=\"token punctuation\">:</span> <span class=\"token string\">'BlogPost'</span><span class=\"token punctuation\">,</span>\n        route<span class=\"token punctuation\">:</span> <span class=\"token string\">'/blog/:year/:month/:day/:slug'</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></pre>\n<blockquote>\n<p>ðŸ’¡ To create a template for the data source route you'll need to create a <strong>[typeName].vue</strong> file in <strong>src/templates</strong>. This will automatically be the template for this route. Learn more about <a href=\"/docs/templates\">Templates</a></p>\n</blockquote>\n<h2 id=\"routing-for-custom-data\"><a href=\"#routing-for-custom-data\" aria-hidden=\"true\">#</a>Routing for custom data</h2>\n<p>When you add a custom data source you need to use the <code class=\"language-text\">route</code> option inside <code class=\"language-text\">addContentType()</code> <strong>OR</strong> use <code class=\"language-text\">path</code> option inside <code class=\"language-text\">addNode()</code>. <code class=\"language-text\">route</code> will be used for all posts and <code class=\"language-text\">path</code> will be set per post. It's only possible to use one of them. If both are used <code class=\"language-text\">route</code> will be prioritized.</p>\n<p>Learn more about <a href=\"/docs/fetching-data\">fetching custom data here</a></p>\n<pre class=\"language-js\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">loadSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> store <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.example.com/posts'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> contentType <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">addContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      typeName<span class=\"token punctuation\">:</span> <span class=\"token string\">'BlogPosts'</span><span class=\"token punctuation\">,</span>\n      route<span class=\"token punctuation\">:</span> <span class=\"token string\">'blog/:slug'</span>  <span class=\"token comment\">// add this for one dynamic route...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      contentType<span class=\"token punctuation\">.</span><span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n        title<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>title\n        path<span class=\"token punctuation\">:</span> <span class=\"token template-string\"><span class=\"token string\">`blog/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>item<span class=\"token punctuation\">.</span>slug<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">`</span></span> <span class=\"token comment\">//... or this for a route per item</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></pre>\n<blockquote>\n<p>ðŸ’¡ To create a template for the data source route you'll need to create a <strong>[typeName].vue</strong> file in <strong>src/templates</strong>. This will automatically be the template for this route. Learn more about <a href=\"/docs/templates\">Templates</a></p>\n</blockquote>\n<h2 id=\"route-params\"><a href=\"#route-params\" aria-hidden=\"true\">#</a>Route params</h2>\n<p>Any custom field from the current <code class=\"language-text\">node</code> will be possible to use as route params. The <code class=\"language-text\">node.date</code> field has a set of shorthand helpers; <code class=\"language-text\">:year</code>, <code class=\"language-text\">:month</code> and <code class=\"language-text\">:day</code>. Access field values in deep objects or arrays by separating properties or indexes with double underscores (<code class=\"language-text\">__</code>). Field values are slugified by default, but the original value will be available as <strong>{fieldname}_raw</strong>.</p>\n<ul>\n<li><code class=\"language-text\">:id</code> resolves to <code class=\"language-text\">node.id</code></li>\n<li><code class=\"language-text\">:value</code> resolves to <code class=\"language-text\">node.value</code> <em>(slugified value)</em></li>\n<li><code class=\"language-text\">:value_raw</code> resolves to <code class=\"language-text\">node.value</code> <em>(original value)</em></li>\n<li><code class=\"language-text\">:object__value</code> resolves to <code class=\"language-text\">node.object.value</code></li>\n<li><code class=\"language-text\">:array__3__id</code> resolves to <code class=\"language-text\">node.array[3].id</code></li>\n</ul>\n","headings":[{"value":"Routing"}],"subtitles":[{"value":"Page routing","anchor":"#page-routing"},{"value":"Routing for source plugins","anchor":"#routing-for-source-plugins"},{"value":"Routing for custom data","anchor":"#routing-for-custom-data"},{"value":"Route params","anchor":"#route-params"}]}},"context":{}}