{"data":{"html":{"path":"/html/data-store-api","title":"Data Store API","content":"<h1 id=\"data-store-api\"><a href=\"#data-store-api\" aria-hidden=\"true\">#</a>Data Store API</h1>\n<p>The Data Store API lets you insert your own data into the GraphQL data layer. You will then be able to access it through GraphQL in your components. <strong>Use this API if you want to build a custom data source connection or a plugin.</strong></p>\n<p>Start by using the <code class=\"language-text\">api.loadSource()</code> hook in <code class=\"language-text\">gridsome.server.js</code>:</p>\n<pre class=\"language-js\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">loadSource</span><span class=\"token punctuation\">(</span>store <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Use Data Store API here</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></pre>\n<h2 id=\"add-a-content-type-collection\"><a href=\"#add-a-content-type-collection\" aria-hidden=\"true\">#</a>Add a content type collection</h2>\n<h3 id=\"storeaddcontenttypeoptions\"><a href=\"#storeaddcontenttypeoptions\" aria-hidden=\"true\">#</a><code class=\"language-text\">store.addContentType(options)</code></h3>\n<p>Add a new content type to store.</p>\n<p>A Vue component in the <code class=\"language-text\">src/templates</code> folder with a filename matching the <code class=\"language-text\">typeName</code> option will be used as a template for all nodes with this type. <a href=\"/docs/templates\">Read more about templates</a>.</p>\n<h5 id=\"arguments\"><a href=\"#arguments\" aria-hidden=\"true\">#</a>Arguments</h5>\n<ul>\n<li>\n<p>options <code class=\"language-text\">object | string</code> <em>Options or just the GraphQL schema type name.</em></p>\n<ul>\n<li>typeName <code class=\"language-text\">string</code> <em>Required GraphQL schema type and template name.</em></li>\n<li>route <code class=\"language-text\">string</code> <em>Optional dynamic route.</em> <a href=\"/docs/routing\">Read more about Routing</a></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"usage\"><a href=\"#usage\" aria-hidden=\"true\">#</a>Usage</h5>\n<pre class=\"language-js\">api<span class=\"token punctuation\">.</span><span class=\"token function\">loadSource</span><span class=\"token punctuation\">(</span>store <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">addContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    typeName<span class=\"token punctuation\">:</span> <span class=\"token string\">'BlogPost'</span><span class=\"token punctuation\">,</span>\n    route<span class=\"token punctuation\">:</span> <span class=\"token string\">'/blog/:year/:month/:day/:slug'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></pre>\n<h3 id=\"storegetcontenttypetypename\"><a href=\"#storegetcontenttypetypename\" aria-hidden=\"true\">#</a><code class=\"language-text\">store.getContentType(typeName)</code></h3>\n<p>Get a content type previously created.</p>\n<h5 id=\"arguments-1\"><a href=\"#arguments-1\" aria-hidden=\"true\">#</a>Arguments</h5>\n<ul>\n<li>typeName <code class=\"language-text\">string</code> <em>The GraphQL schema type name.</em></li>\n</ul>\n<h2 id=\"add-nodes-to-collections\"><a href=\"#add-nodes-to-collections\" aria-hidden=\"true\">#</a>Add nodes to collections</h2>\n<h3 id=\"collectionaddnodeoptions\"><a href=\"#collectionaddnodeoptions\" aria-hidden=\"true\">#</a><code class=\"language-text\">collection.addNode(options)</code></h3>\n<h5 id=\"arguments-2\"><a href=\"#arguments-2\" aria-hidden=\"true\">#</a>Arguments</h5>\n<ul>\n<li>\n<p>options <code class=\"language-text\">Object</code> <em>Required.</em></p>\n<ul>\n<li>title <code class=\"language-text\">string</code> <em>Required.</em></li>\n<li>id <code class=\"language-text\">string</code> <em>A unique id for this content type.</em></li>\n<li>slug <code class=\"language-text\">string</code> <em>Custom slug. Fallbacks to a slugified <code class=\"language-text\">title</code>.</em></li>\n<li>path <code class=\"language-text\">string</code> <em>Optional path to use when not having a dynamic route.</em></li>\n<li>date <code class=\"language-text\">string</code> <em>The date. Fallbacks to current date.</em></li>\n<li>content <code class=\"language-text\">string</code> <em>Optional content.</em></li>\n<li>excerpt <code class=\"language-text\">string</code> <em>Optional excerpt.</em></li>\n<li>fields <code class=\"language-text\">object</code> <em>Custom fields.</em></li>\n</ul>\n</li>\n</ul>\n<h5 id=\"usage-1\"><a href=\"#usage-1\" aria-hidden=\"true\">#</a>Usage</h5>\n<pre class=\"language-js\">api<span class=\"token punctuation\">.</span><span class=\"token function\">loadSource</span><span class=\"token punctuation\">(</span>store <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">addContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    typeName<span class=\"token punctuation\">:</span> <span class=\"token string\">'BlogPost'</span><span class=\"token punctuation\">,</span>\n    route<span class=\"token punctuation\">:</span> <span class=\"token string\">'/blog/:year/:slug'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  posts<span class=\"token punctuation\">.</span><span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'My first blog post'</span><span class=\"token punctuation\">,</span>\n    date<span class=\"token punctuation\">:</span> <span class=\"token string\">'2018-11-02'</span><span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      myField<span class=\"token punctuation\">:</span> <span class=\"token string\">'My value'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></pre>\n<h2 id=\"referencing-other-nodes\"><a href=\"#referencing-other-nodes\" aria-hidden=\"true\">#</a>Referencing other nodes</h2>\n<h3 id=\"storecreatereferencetypename-id\"><a href=\"#storecreatereferencetypename-id\" aria-hidden=\"true\">#</a><code class=\"language-text\">store.createReference(typeName, id)</code></h3>\n<p>A helper function for creating references to other nodes.</p>\n<h5 id=\"arguments-3\"><a href=\"#arguments-3\" aria-hidden=\"true\">#</a>Arguments</h5>\n<ul>\n<li>typeName <code class=\"language-text\">string | object</code> <em>The node typeName to reference or the node instance.</em></li>\n<li>id <code class=\"language-text\">string | array</code> <em>The node id to reference (or ids if multiple nodes).</em></li>\n</ul>\n<h5 id=\"usage-2\"><a href=\"#usage-2\" aria-hidden=\"true\">#</a>Usage</h5>\n<p>This example creates two content types: <code class=\"language-text\">Author</code> and <code class=\"language-text\">Post</code>. The <code class=\"language-text\">author1</code> and <code class=\"language-text\">author2</code> fields on <code class=\"language-text\">Post</code> will both have a reference to the same author.</p>\n<pre class=\"language-js\">api<span class=\"token punctuation\">.</span><span class=\"token function\">loadSource</span><span class=\"token punctuation\">(</span>store <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> authors <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">addContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Author'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">addContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Post'</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token keyword\">const</span> author <span class=\"token operator\">=</span> authors<span class=\"token punctuation\">.</span><span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'The author'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  posts<span class=\"token punctuation\">.</span><span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'The post'</span><span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      author1<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">createReference</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Author'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span>\n      author2<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">createReference</span><span class=\"token punctuation\">(</span>author<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></pre>\n<p>The field will contain the referred node fields:</p>\n<pre class=\"language-graphql\"><span class=\"token keyword\">query</span> BlogPost <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  blogPost <span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    title\n    author1 <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span>\n    author2 <span class=\"token punctuation\">{</span> title <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<h3 id=\"collectionaddreferencefieldname-typename\"><a href=\"#collectionaddreferencefieldname-typename\" aria-hidden=\"true\">#</a><code class=\"language-text\">collection.addReference(fieldName, typeName)</code></h3>\n<p>Make a root field for all nodes in collection referencing to another node.</p>\n<h5 id=\"arguments-4\"><a href=\"#arguments-4\" aria-hidden=\"true\">#</a>Arguments</h5>\n<ul>\n<li>fieldName <code class=\"language-text\">string</code> <em>The field name.</em></li>\n<li>typeName <code class=\"language-text\">string</code> <em>GraphQL schema type to reference.</em></li>\n</ul>\n<h5 id=\"usage-3\"><a href=\"#usage-3\" aria-hidden=\"true\">#</a>Usage</h5>\n<pre class=\"language-js\">api<span class=\"token punctuation\">.</span><span class=\"token function\">loadSource</span><span class=\"token punctuation\">(</span>store <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">addContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Post'</span><span class=\"token punctuation\">)</span>\n\n  posts<span class=\"token punctuation\">.</span><span class=\"token function\">addReference</span><span class=\"token punctuation\">(</span><span class=\"token string\">'author'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Author'</span><span class=\"token punctuation\">)</span>\n\n  posts<span class=\"token punctuation\">.</span><span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'The post'</span><span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      author<span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span> <span class=\"token comment\">// Will reference to an author with id '1'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></pre>\n<h2 id=\"custom-graphql-fields\"><a href=\"#custom-graphql-fields\" aria-hidden=\"true\">#</a>Custom GraphQL fields</h2>\n<h3 id=\"collectionaddschemafieldfieldname-fn\"><a href=\"#collectionaddschemafieldfieldname-fn\" aria-hidden=\"true\">#</a><code class=\"language-text\">collection.addSchemaField(fieldName, fn)</code></h3>\n<p>Extend the GraphQL schema with a custom field for a node type.</p>\n<h5 id=\"arguments-5\"><a href=\"#arguments-5\" aria-hidden=\"true\">#</a>Arguments</h5>\n<ul>\n<li>fieldName <code class=\"language-text\">string</code> <em>The field name to create on node.</em></li>\n<li>fn <code class=\"language-text\">Function</code> <em>A function which returns an object with a GraphQL field and resolver.</em></li>\n</ul>\n<h5 id=\"usage-4\"><a href=\"#usage-4\" aria-hidden=\"true\">#</a>Usage</h5>\n<pre class=\"language-js\">api<span class=\"token punctuation\">.</span><span class=\"token function\">loadSource</span><span class=\"token punctuation\">(</span>store <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">addContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Post'</span><span class=\"token punctuation\">)</span>\n\n  posts<span class=\"token punctuation\">.</span><span class=\"token function\">addSchemaField</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myField'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> graphql <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    type<span class=\"token punctuation\">:</span> graphql<span class=\"token punctuation\">.</span>GraphQLString<span class=\"token punctuation\">,</span>\n    args<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      upperCase<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> graphql<span class=\"token punctuation\">.</span>GraphQLBoolean<span class=\"token punctuation\">,</span> defaultValue<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function\">resolve</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> value <span class=\"token operator\">=</span> node<span class=\"token punctuation\">.</span>fields<span class=\"token punctuation\">.</span>myField\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>upperCase<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">return</span> value\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></pre>\n<pre class=\"language-graphql\"><span class=\"token keyword\">query</span> Post <span class=\"token punctuation\">(</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">:</span> String<span class=\"token operator\">!</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  blogPost <span class=\"token punctuation\">(</span><span class=\"token attr-name\">id</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    myField <span class=\"token punctuation\">(</span><span class=\"token attr-name\">upperCase</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<p>Read more about <a href=\"https://graphql.org/learn/execution/#root-fields-resolvers\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL resolvers</a>.</p>\n<h2 id=\"example-usage\"><a href=\"#example-usage\" aria-hidden=\"true\">#</a>Example usage</h2>\n<h3 id=\"basic\"><a href=\"#basic\" aria-hidden=\"true\">#</a>Basic</h3>\n<p>This example creates a <code class=\"language-text\">MyData</code> content type and just adds a single node to it.</p>\n<pre class=\"language-js\">api<span class=\"token punctuation\">.</span><span class=\"token function\">loadSource</span><span class=\"token punctuation\">(</span>store <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> contentType <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">addContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    typeName<span class=\"token punctuation\">:</span> <span class=\"token string\">'MyData'</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  contentType<span class=\"token punctuation\">.</span><span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    title<span class=\"token punctuation\">:</span> <span class=\"token string\">'Lorem ipsum dolor sit amet.'</span><span class=\"token punctuation\">,</span>\n    fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      customField<span class=\"token punctuation\">:</span> <span class=\"token string\">'...'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></pre>\n<p>You will then be able to query that data in the <code class=\"language-text\">page-query</code> and <code class=\"language-text\">static-query</code> tags in your Vue components with a query like this:</p>\n<pre class=\"language-graphql\"><span class=\"token keyword\">query</span> MyData <span class=\"token punctuation\">{</span>\n  allMyData <span class=\"token punctuation\">{</span>\n    edges <span class=\"token punctuation\">{</span>\n      node <span class=\"token punctuation\">{</span>\n        title\n        customField\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></pre>\n<h3 id=\"fetching-external-data\"><a href=\"#fetching-external-data\" aria-hidden=\"true\">#</a>Fetching external data</h3>\n<p>You can also fetch external data and add it to the store.</p>\n<pre class=\"language-js\"><span class=\"token keyword\">const</span> axios <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'axios'</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  api<span class=\"token punctuation\">.</span><span class=\"token function\">loadSource</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> store <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://api.example.com/posts'</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">const</span> contentType <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">addContentType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      typeName<span class=\"token punctuation\">:</span> <span class=\"token string\">'BlogPosts'</span>\n      route<span class=\"token punctuation\">:</span> <span class=\"token string\">'/blog/:year/:slug'</span> <span class=\"token comment\">// optional</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> item <span class=\"token keyword\">of</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      contentType<span class=\"token punctuation\">.</span><span class=\"token function\">addNode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        id<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span>\n        title<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">,</span>\n        date<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>date<span class=\"token punctuation\">,</span>\n        content<span class=\"token punctuation\">:</span> item<span class=\"token punctuation\">.</span>content\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></pre>\n","headings":[{"value":"Data Store API"}],"subtitles":[{"value":"Add a content type collection","anchor":"#add-a-content-type-collection"},{"value":"Add nodes to collections","anchor":"#add-nodes-to-collections"},{"value":"Referencing other nodes","anchor":"#referencing-other-nodes"},{"value":"Custom GraphQL fields","anchor":"#custom-graphql-fields"},{"value":"Example usage","anchor":"#example-usage"}]}},"context":{}}